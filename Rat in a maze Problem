
class Solution {
private:
    bool isSafe(int x, int y, vector<vector<int>> &visited, vector<vector<int>> &mat) {
        if ((x >= 0 && x < mat.size()) && (y >= 0 && y < mat.size()) && visited[x][y] == 0 && mat[x][y] == 1) {
            return true;
        } else {
            return false;
        }
    }

    void solve(vector<vector<int>> &mat, vector<string> &ans, int x, int y, vector<vector<int>> &visited, string path) {
        if (x == mat.size()-1 && y == mat.size()-1) {
            ans.push_back(path);
            return;
        }

        visited[x][y] = 1;

        // Down
        int newx = x + 1;
        int newy = y;
        if (isSafe(newx, newy, visited, mat)) {
            path.push_back('D');
            solve(mat, ans, newx, newy, visited, path);
            path.pop_back();
        }

        // Left
        newx = x;
        newy = y - 1;
        if (isSafe(newx, newy, visited, mat)) {
            path.push_back('L');
            solve(mat, ans, newx, newy, visited, path);
            path.pop_back();
        }

        // Right
        newx = x;
        newy = y + 1;
        if (isSafe(newx, newy, visited, mat)) {
            path.push_back('R');
            solve(mat, ans, newx, newy, visited, path);
            path.pop_back();
        }

        // Up
        newx = x - 1;
        newy = y;
        if (isSafe(newx, newy, visited, mat)) {
            path.push_back('U');
            solve(mat, ans, newx, newy, visited, path);
            path.pop_back();
        }

        visited[x][y] = 0;
    }

public:
    vector<string> findPath(vector<vector<int>> &mat) {
        vector<string> ans;
        if (mat[0][0] == 0) return ans;

        int srcx = 0;
        int srcy = 0;
        vector<vector<int>> visited(mat.size(), vector<int>(mat.size(), 0));

        string path = "";
        solve(mat, ans, srcx, srcy, visited, path);
        sort(ans.begin(), ans.end());
        return ans;
    }
};
